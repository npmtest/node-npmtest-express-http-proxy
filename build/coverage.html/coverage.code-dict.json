{"/home/travis/build/npmtest/node-npmtest-express-http-proxy/test.js":"/* istanbul instrument in package npmtest_express_http_proxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-http-proxy/lib.npmtest_express_http_proxy.js":"/* istanbul instrument in package npmtest_express_http_proxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_express_http_proxy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_express_http_proxy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-express-http-proxy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-express-http-proxy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_express_http_proxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_express_http_proxy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_express_http_proxy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_express_http_proxy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_express_http_proxy.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_express_http_proxy.__dirname +\n                    '/lib.npmtest_express_http_proxy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-http-proxy/express-http-proxy/index.js":"'use strict';\n\nvar assert = require('assert');\nvar url = require('url');\nvar http = require('http');\nvar https = require('https');\nvar getRawBody = require('raw-body');\nvar zlib = require('zlib');\n\n\nfunction unset(val) {\n  return (typeof val  ===  'undefined' || val === '' || val === null);\n}\n\nmodule.exports = function proxy(host, options) {\n  assert(host, 'Host should not be empty');\n\n  options = options || {};\n\n  var parsedHost;\n\n  /**\n   * Function :: intercept(targetResponse, data, res, req, function(err, json, sent));\n   */\n  var intercept = options.intercept;\n  var decorateRequest = options.decorateRequest;\n  var forwardPath = options.forwardPath || defaultForwardPath;\n  var resolveProxyPathAsync = options.forwardPathAsync || defaultForwardPathAsync(forwardPath);\n  var filter = options.filter || defaultFilter;\n  var limit = options.limit || '1mb';\n  var preserveReqSession = options.preserveReqSession;\n  var memoizeHost = unset(options.memoizeHost) ? true : options.memoizeHost;\n\n  return function handleProxy(req, res, next) {\n    if (!filter(req, res)) { return next(); }\n    var resolvePath = resolveProxyPathAsync(req, res);\n    var parseBody = maybeParseBody(req, limit);\n    var prepareRequest = Promise.all([resolvePath, parseBody]);\n    prepareRequest.then(function(results) {\n      var path = results[0];\n      var bodyContent = results[1];\n      sendProxyRequest(req, res, next, path, bodyContent);\n    });\n  };\n\n  function sendProxyRequest(req, res, next, path, bodyContent) {\n    parsedHost = (memoizeHost && parsedHost) ? parsedHost : parseHost(host, req, options);\n\n    var reqOpt = {\n      hostname: parsedHost.host,\n      port: options.port || parsedHost.port,\n      headers: reqHeaders(req, options),\n      method: req.method,\n      path: path,\n      bodyContent: bodyContent,\n      params: req.params,\n    };\n\n    if (preserveReqSession) {\n      reqOpt.session = req.session;\n    }\n\n    if (decorateRequest) {\n      reqOpt = decorateRequest(reqOpt, req) || reqOpt;\n    }\n\n    bodyContent = reqOpt.bodyContent;\n    delete reqOpt.bodyContent;\n    delete reqOpt.params;\n\n    bodyContent = options.reqAsBuffer ?\n      asBuffer(bodyContent, options) :\n      asBufferOrString(bodyContent);\n\n    reqOpt.headers['content-length'] = getContentLength(bodyContent);\n\n    if (bodyEncoding(options)) {\n      reqOpt.headers['Accept-Charset'] = bodyEncoding(options);\n    }\n\n\n    function postIntercept(res, next, rspData) {\n      return function(err, rspd, sent) {\n        if (err) {\n          return next(err);\n        }\n        rspd = asBuffer(rspd, options);\n        rspd = maybeZipResponse(rspd, res);\n\n        if (!Buffer.isBuffer(rspd)) {\n          next(new Error('intercept should return string or' +\n                'buffer as data'));\n        }\n\n        if (!res.headersSent) {\n          res.set('content-length', rspd.length);\n        } else if (rspd.length !== rspData.length) {\n          var error = '\"Content-Length\" is already sent,' +\n                'the length of response data can not be changed';\n          next(new Error(error));\n        }\n\n        if (!sent) {\n          res.send(rspd);\n        }\n      };\n    }\n\n    var proxyTargetRequest = parsedHost.module.request(reqOpt, function(rsp) {\n      var chunks = [];\n\n      rsp.on('data', function(chunk) {\n        chunks.push(chunk);\n      });\n\n      rsp.on('end', function() {\n\n        var rspData = Buffer.concat(chunks, chunkLength(chunks));\n\n        if (intercept) {\n          rspData = maybeUnzipResponse(rspData, res);\n          var callback = postIntercept(res, next, rspData);\n          intercept(rsp, rspData, req, res, callback);\n        } else {\n          // see issue https://github.com/villadora/express-http-proxy/issues/104\n          // Not sure how to automate tests on this line, so be careful when changing.\n          if (!res.headersSent) {\n            res.send(rspData);\n          }\n        }\n      });\n\n      rsp.on('error', function(err) {\n        next(err);\n      });\n\n      if (!res.headersSent) {\n        res.status(rsp.statusCode);\n        Object.keys(rsp.headers)\n          .filter(function(item) { return item !== 'transfer-encoding'; })\n          .forEach(function(item) {\n            res.set(item, rsp.headers[item]);\n          });\n      }\n    });\n\n    proxyTargetRequest.on('socket', function(socket) {\n      if (options.timeout) {\n        socket.setTimeout(options.timeout, function() {\n          proxyTargetRequest.abort();\n        });\n      }\n    });\n\n    proxyTargetRequest.on('error', function(err) {\n      if (err.code === 'ECONNRESET') {\n        res.setHeader('X-Timout-Reason',\n          'express-http-proxy timed out your request after ' +\n          options.timeout + 'ms.');\n        res.writeHead(504, {'Content-Type': 'text/plain'});\n        res.end();\n      } else {\n        next(err);\n      }\n    });\n\n    if (bodyContent.length) {\n      proxyTargetRequest.write(bodyContent);\n    }\n\n    proxyTargetRequest.end();\n\n    req.on('aborted', function() {\n      proxyTargetRequest.abort();\n    });\n  }\n};\n\n\n\nfunction extend(obj, source, skips) {\n\n  if (!source) {\n    return obj;\n  }\n\n  for (var prop in source) {\n    if (!skips || skips.indexOf(prop) === -1) {\n      obj[prop] = source[prop];\n    }\n  }\n\n  return obj;\n}\n\nfunction parseHost(host, req, options) {\n\n  host = (typeof host === 'function') ? host(req) : host.toString();\n\n  if (!host) {\n    return new Error('Empty host parameter');\n  }\n\n  if (!/http(s)?:\\/\\//.test(host)) {\n    host = 'http://' + host;\n  }\n\n  var parsed = url.parse(host);\n\n  if (!parsed.hostname) {\n    return new Error('Unable to parse hostname, possibly missing protocol://?');\n  }\n\n  var ishttps = options.https || parsed.protocol === 'https:';\n\n  return {\n    host: parsed.hostname,\n    port: parsed.port || (ishttps ? 443 : 80),\n    module: ishttps ? https : http,\n  };\n}\n\nfunction reqHeaders(req, options) {\n\n\n  var headers = options.headers || {};\n\n  var skipHdrs = [ 'connection', 'content-length' ];\n  if (!options.preserveHostHdr) {\n    skipHdrs.push('host');\n  }\n  var hds = extend(headers, req.headers, skipHdrs);\n  hds.connection = 'close';\n\n  return hds;\n}\n\nfunction defaultFilter() {\n  // No-op version of filter.  Allows everything!\n\n  return true;\n}\n\nfunction defaultForwardPath(req) {\n\n  return url.parse(req.url).path;\n}\n\nfunction bodyEncoding(options) {\n\n\n  /* For reqBodyEncoding, these is a meaningful difference between null and\n   * undefined.  null should be passed forward as the value of reqBodyEncoding,\n   * and undefined should result in utf-8.\n   */\n\n  return options.reqBodyEncoding !== undefined ? options.reqBodyEncoding: 'utf-8';\n}\n\n\nfunction chunkLength(chunks) {\n\n\n  return chunks.reduce(function(len, buf) {\n    return len + buf.length;\n  }, 0);\n}\n\nfunction defaultForwardPathAsync(forwardPath) {\n\n  return function(req, res) {\n    return new Promise(function(resolve) {\n      resolve(forwardPath(req, res));\n    });\n  };\n}\n\nfunction asBuffer(body, options) {\n\n  var ret;\n  if (Buffer.isBuffer(body)) {\n    ret = body;\n  } else if (typeof body === 'object') {\n    ret = new Buffer(JSON.stringify(body), bodyEncoding(options));\n  } else if (typeof body === 'string') {\n    ret = new Buffer(body, bodyEncoding(options));\n  }\n  return ret;\n}\n\nfunction asBufferOrString(body) {\n\n  var ret;\n  if (Buffer.isBuffer(body)) {\n    ret = body;\n  } else if (typeof body === 'object') {\n    ret = JSON.stringify(body);\n  } else if (typeof body === 'string') {\n    ret = body;\n  }\n  return ret;\n}\n\nfunction getContentLength(body) {\n\n  var result;\n  if (Buffer.isBuffer(body)) { // Buffer\n    result = body.length;\n  } else if (typeof body === 'string') {\n    result = Buffer.byteLength(body);\n  }\n  return result;\n}\n\nfunction isResGzipped(res) {\n  return res._headers['content-encoding'] === 'gzip';\n}\n\nfunction zipOrUnzip(method) {\n  return function(rspData, res) {\n    return (isResGzipped(res)) ? zlib[method](rspData) : rspData;\n  };\n}\n\nfunction maybeParseBody(req, limit) {\n  var promise;\n  if (req.body) {\n    promise = new Promise(function(resolve) {\n      resolve(req.body);\n    });\n  } else {\n    // Returns a promise if no callback specified and global Promise exists.\n    promise = getRawBody(req, {\n      length: req.headers['content-length'],\n      limit: limit,\n    });\n  }\n  return promise;\n}\n\nvar maybeUnzipResponse = zipOrUnzip('gunzipSync');\nvar maybeZipResponse = zipOrUnzip('gzipSync');\n"}